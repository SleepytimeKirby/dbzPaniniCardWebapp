/**
 * This class is generated by jOOQ
 */
package rfitzpatrick.dbz.DatabaseJOOQ.tables;


import org.jooq.*;
import org.jooq.impl.TableImpl;
import rfitzpatrick.dbz.DatabaseJOOQ.Dbz;
import rfitzpatrick.dbz.DatabaseJOOQ.Keys;
import rfitzpatrick.dbz.DatabaseJOOQ.tables.records.DbzDecksRecord;

import javax.annotation.Generated;
import java.util.Arrays;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@Generated(
	value = {
		"http://www.jooq.org",
		"jOOQ version:3.7.2"
	},
	comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class DbzDecks extends TableImpl<DbzDecksRecord> {

	private static final long serialVersionUID = 1986877027;

	/**
	 * The reference instance of <code>dbz.dbz_decks</code>
	 */
	public static final DbzDecks DBZ_DECKS = new DbzDecks();

	/**
	 * The class holding records for this type
	 */
	@Override
	public Class<DbzDecksRecord> getRecordType() {
		return DbzDecksRecord.class;
	}

	/**
	 * The column <code>dbz.dbz_decks.id</code>.
	 */
	public final TableField<DbzDecksRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

	/**
	 * The column <code>dbz.dbz_decks.user_id</code>.
	 */
	public final TableField<DbzDecksRecord, String> USER_ID = createField("user_id", org.jooq.impl.SQLDataType.VARCHAR.length(45), this, "");

	/**
	 * The column <code>dbz.dbz_decks.deck_name</code>.
	 */
	public final TableField<DbzDecksRecord, String> DECK_NAME = createField("deck_name", org.jooq.impl.SQLDataType.VARCHAR.length(45), this, "");

	/**
	 * The column <code>dbz.dbz_decks.seralized_deck</code>.
	 */
	public final TableField<DbzDecksRecord, byte[]> SERALIZED_DECK = createField("seralized_deck", org.jooq.impl.SQLDataType.BLOB, this, "");

	/**
	 * Create a <code>dbz.dbz_decks</code> table reference
	 */
	public DbzDecks() {
		this("dbz_decks", null);
	}

	/**
	 * Create an aliased <code>dbz.dbz_decks</code> table reference
	 */
	public DbzDecks(String alias) {
		this(alias, DBZ_DECKS);
	}

	private DbzDecks(String alias, Table<DbzDecksRecord> aliased) {
		this(alias, aliased, null);
	}

	private DbzDecks(String alias, Table<DbzDecksRecord> aliased, Field<?>[] parameters) {
		super(alias, Dbz.DBZ, aliased, parameters, "");
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Identity<DbzDecksRecord, Integer> getIdentity() {
		return Keys.IDENTITY_DBZ_DECKS;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public UniqueKey<DbzDecksRecord> getPrimaryKey() {
		return Keys.KEY_DBZ_DECKS_PRIMARY;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<UniqueKey<DbzDecksRecord>> getKeys() {
		return Arrays.<UniqueKey<DbzDecksRecord>>asList(Keys.KEY_DBZ_DECKS_PRIMARY);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public DbzDecks as(String alias) {
		return new DbzDecks(alias, this);
	}

	/**
	 * Rename this table
	 */
	public DbzDecks rename(String name) {
		return new DbzDecks(name, null);
	}
}
