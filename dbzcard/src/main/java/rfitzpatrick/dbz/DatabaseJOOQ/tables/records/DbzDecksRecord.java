/**
 * This class is generated by jOOQ
 */
package rfitzpatrick.dbz.DatabaseJOOQ.tables.records;


import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record4;
import org.jooq.Row4;
import org.jooq.impl.UpdatableRecordImpl;
import rfitzpatrick.dbz.DatabaseJOOQ.tables.DbzDecks;

import javax.annotation.Generated;


/**
 * This class is generated by jOOQ.
 */
@Generated(
	value = {
		"http://www.jooq.org",
		"jOOQ version:3.7.2"
	},
	comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class DbzDecksRecord extends UpdatableRecordImpl<DbzDecksRecord> implements Record4<Integer, String, String, byte[]> {

	private static final long serialVersionUID = 1893622414;

	/**
	 * Setter for <code>dbz.dbz_decks.id</code>.
	 */
	public void setId(Integer value) {
		setValue(0, value);
	}

	/**
	 * Getter for <code>dbz.dbz_decks.id</code>.
	 */
	public Integer getId() {
		return (Integer) getValue(0);
	}

	/**
	 * Setter for <code>dbz.dbz_decks.user_id</code>.
	 */
	public void setUserId(String value) {
		setValue(1, value);
	}

	/**
	 * Getter for <code>dbz.dbz_decks.user_id</code>.
	 */
	public String getUserId() {
		return (String) getValue(1);
	}

	/**
	 * Setter for <code>dbz.dbz_decks.deck_name</code>.
	 */
	public void setDeckName(String value) {
		setValue(2, value);
	}

	/**
	 * Getter for <code>dbz.dbz_decks.deck_name</code>.
	 */
	public String getDeckName() {
		return (String) getValue(2);
	}

	/**
	 * Setter for <code>dbz.dbz_decks.seralized_deck</code>.
	 */
	public void setSeralizedDeck(byte[] value) {
		setValue(3, value);
	}

	/**
	 * Getter for <code>dbz.dbz_decks.seralized_deck</code>.
	 */
	public byte[] getSeralizedDeck() {
		return (byte[]) getValue(3);
	}

	// -------------------------------------------------------------------------
	// Primary key information
	// -------------------------------------------------------------------------

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Record1<Integer> key() {
		return (Record1) super.key();
	}

	// -------------------------------------------------------------------------
	// Record4 type implementation
	// -------------------------------------------------------------------------

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Row4<Integer, String, String, byte[]> fieldsRow() {
		return (Row4) super.fieldsRow();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Row4<Integer, String, String, byte[]> valuesRow() {
		return (Row4) super.valuesRow();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<Integer> field1() {
		return DbzDecks.DBZ_DECKS.ID;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<String> field2() {
		return DbzDecks.DBZ_DECKS.USER_ID;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<String> field3() {
		return DbzDecks.DBZ_DECKS.DECK_NAME;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<byte[]> field4() {
		return DbzDecks.DBZ_DECKS.SERALIZED_DECK;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Integer value1() {
		return getId();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public String value2() {
		return getUserId();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public String value3() {
		return getDeckName();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public byte[] value4() {
		return getSeralizedDeck();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public DbzDecksRecord value1(Integer value) {
		setId(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public DbzDecksRecord value2(String value) {
		setUserId(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public DbzDecksRecord value3(String value) {
		setDeckName(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public DbzDecksRecord value4(byte[] value) {
		setSeralizedDeck(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public DbzDecksRecord values(Integer value1, String value2, String value3, byte[] value4) {
		value1(value1);
		value2(value2);
		value3(value3);
		value4(value4);
		return this;
	}

	// -------------------------------------------------------------------------
	// Constructors
	// -------------------------------------------------------------------------

	/**
	 * Create a detached DbzDecksRecord
	 */
	public DbzDecksRecord() {
		super(DbzDecks.DBZ_DECKS);
	}

	/**
	 * Create a detached, initialised DbzDecksRecord
	 */
	public DbzDecksRecord(Integer id, String userId, String deckName, byte[] seralizedDeck) {
		super(DbzDecks.DBZ_DECKS);

		setValue(0, id);
		setValue(1, userId);
		setValue(2, deckName);
		setValue(3, seralizedDeck);
	}
}
